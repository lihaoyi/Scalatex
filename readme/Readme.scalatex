@import Main._
@import scalatex.site._


@def exampleWrapper(f: Frag*) = Seq(
  hr,
  div(
    opacity:="0.6",
    fontStyle.oblique,
    f
  ),
  hr
)
@def pairs(frags: Frag*) = div(frags, div(clear:="both"))
@def half(frags: Frag*) = div(frags, width:="50%", float.left)
@def exampleRef(start: String, classes: String) = {
  val path = wd/'api/'src/'test/'scala/'scalatex/"ExampleTests.scala"
  val tq = "\"\"\""
  val classList = classes.split(" ")
  val chunks = for(i <- 0 until classList.length) yield half{
    hl.ref(path, Seq("'" + start, tq) ++ Seq.fill(i*2)(tq) ++ Seq(""), Seq(tq), classList(i))
  }
  pairs(chunks)
}
@a(
  href:="https://github.com/lihaoyi/scalatex",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)
@sect("ScalateÏ‡ ", scalatex.Constants.version)

  @exampleRef("helloWorld", "scala html")

  @p
    @lnk("Scalatex", "https://github.com/lihaoyi/Scalatex") is a language for generating rich HTML documents in Scala. It lets you DRY up your documents the same way you DRY your code. Unlike most templating languages, Scalatex is a thin shim on top of the Scala programming language. This means that some things which require built-in support or are otherwise impossible in other document/static-site-generators are completely trivial with Scalatex, for example:
  @ul
    @li
      Extracting the structure of the document as a @sect.ref{Section}, which you can use to generate a navigation bar or @sect.ref{Generating a Table of Contents}
    @li
      Enforcing that @sect.ref("Section", "all internal links point to a valid document header"), and @sect.ref("lnk", "all external links point to a valid URL")
    @li
      @sect.ref("Highlighter", "Fetching snippets of text from files on disk") to e.g. use unit-test-code as examples in the docs
    @li
      Easily defining @sect.ref{Custom Tags} to encapsulate repetitive fragments of your document, e.g. an image-with-caption or code-snippet-with-link.

  @p
    All these things are trivial and elegant to perform with Scalatex, and difficult or messy to do with other static-site-generators. Although Scalatex generates HTML, you can easily build up whatever tags best describe what @i{you} want to do, and use those to build your document, rather than relying on the ad-hoc and messy set provided by browsers.

  @p
    Scalatex lets you write your HTML in a hierarchical structure which then gets compiled to HTML. In Scalatex, everything is part of the output document, except for tokens marked with an @hl.scala{@@} sign. These correspond to HTML tags (provided by @lnk("Scalatags", "https://github.com/lihaoyi/scalatags")), values you want to interpolate, control flow statements, function calls (or definitions!), basically anything that isn't plain text.
  @p
    Scalatex is currently used to generate its own readme (@lnk("here", "https://github.com/lihaoyi/scalatex/blob/master/readme/Readme.scalatex")) as well as the e-book @lnk("Hands-on Scala.js", "http://lihaoyi.github.io/hands-on-scala-js"). It is only published for Scala 2.11.x for the time being.

  @sect{Getting Started}
    @p
      To get started with Scalatex, add the following to your @code{project/build.sbt}:

    @hl.scala
      // sbt 1.0
      addSbtPlugin("com.lihaoyi" % "scalatex-sbt-plugin" % "@scalatex.Constants.version")

      // sbt 0.13
      addSbtPlugin("com.lihaoyi" % "scalatex-sbt-plugin" % "0.3.9")

    @p
      And the following to your project in your @code{build.sbt}:

    @hl.scala
      scalatex.SbtPlugin.projectSettings

      scalaVersion := "2.11.4"

    @p
      To begin with, let's create a file in @code{src/main/scalatex/Hello.scalatex}

    @hl.ref(wd/'site/'src/'test/'scalatex/'scalatex/'site/"Hello.scalatex")

    @p
      Next, you can simply call

    @hl.ref(wd/'site/'src/'test/'scala/'scalatex/'site/"Tests.scala", Seq("Hello().render"), Seq(""), "scala")

    @p
      And it'll print out

    @hl.ref(wd/'site/'src/'test/'scala/'scalatex/'site/"Tests.scala", Seq("<div>"), Seq("\"\"\""), "html")


    @p
      There we have it, your first Scalatex document! You can put this on gh-pages, use it on a website, or where-ever you want.

  @sect{What Scalatex Does}

    @p
      Scalatex converts every @code{.scalatex} file in its source folder into a corresponding Scala @code{object}. These objects have an @hl.scala{apply} method which returns a Scalatags @hl.scala{Frag}, which you can then call @hl.scala{.render} on to give you a HTML string. You can also do other things with the Scalatags @hl.scala{Frag}, but to learn more about it and Scalatags in general take a look at the Scalatags documentation.

    @p
      Inside each Scalatex file, @hl.scala{@@}-escaped things correspond to Scala keywords or names that are currently in scope. Apart from keywords, only @hl.scala{scalatags.Text.all._} is imported by default. This brings in all the HTML tags that we used above to build those HTML fragments. However, you can also @hl.scala{@@import} whatever other names you want, or refer to them fully qualified.

  @sect{Exploring Scalatex}
    @exampleRef("variousSyntaxes", "scala html")

    @p
      Superficially, Scalatex does a small number of translations to convert the @code{.scalatex} document into Scala code:

    @ul
      @li
        @hl.scala{@@}-escapes followed by indentation (like @hl.scala{@@div} above) are passed all the subsequently-indented lines as children.
      @li
        @hl.scala{@@}-escapes followed by curly braces (like @hl.scala{@@h2} above) are passed everything inside the curly braces as children
      @li
        @hl.scala{@@}-escapes followed by parentheses (like @hl.scala{@@h1} above) are passed the contents of the parentheses as a Scala expression.
      @li
        Everything outside of a set of parentheses, that isn't an @hl.scala{@@}-escape, is treated as a string.

    @p
      This accounts for the variation in syntax that you see above. In general, you almost always want to use indentation-based blocks to delimit large sections of the document, only falling back to curly braces for one-line or one-word tags like @hl.scala{@@h2} or @hl.scala{@@b} above.

    @sect{Loops}
      @exampleRef("loops", "scala scala html")

      @p
        Scalatex supports for-loops, as shown above. Again, everything inside the parentheses are an arbitrary Scala expression. Here we can see it binding the @hl.scala{x} value, which is then used in the body of the loop as @hl.scala{@@x} to splice it into the document.
      @p
        In general, there are always two contexts to keep track of:

      @ul
        @li
          Scalatex: strings are raw @code{text}, but variables are escaped as @hl.scala{@@x}
        @li
          Scala: strings are enclosed e.g. @code{"text"}, but variables are raw @hl.scala{x}

      @p
        The value of strings or variables is completely identical in both contexts; it's only the syntax that differs.

    @sect{Conditionals}
      @exampleRef("conditionals", "scala html")

      @p
        Scalatex supports @hl.scala{if}-@hl.scala{else} statements, that behave as you'd expect. Here we're using one in conjunction with a loop to alternate the formatting of different items in a list.

    @sect{Functions}
      @exampleRef("functions", "scala html")

      @p
        Apart from splicing values into the document, you can also call functions, such as @hl.scala{math.sqrt} here.

    @sect{Interpolations}
      @exampleRef("interpolation", "scala html")

      @p
        You can also splice the result of arbitrary chunks of code within a Scalatex document. Using parens @hl.scala{()} lets you splice a single expression, whereas using curlies @hl.scala{{}} lets you splice a block which can contain multiple statements.

      @p
        Blocks can span many lines:

      @exampleRef("multiline", "scala html")

    @sect{External Definitions}
      @p
        You can use imports to bring things into scope, so you don't need to keep referring to them by their full name:

      @exampleRef("imports", "scala html")
      @p
        Since you can splice the value of any Scala expressions, of course you can splice the values that you defined yourself somewhere else:

      @hl.ref(wd/'api/'src/'test/'scala/'scalatex/"ExampleTests.scala", "object Stuff", "'externalDefinitions", "scala")

      @exampleRef("externalDefinitions2", "scala html")

    @sect{Internal Definitions}

      @p
        You can also define things anywhere @i{inside} your Scalatex document. These definitions are only visible within the same document, and are scoped to any blocks they're defined within:

      @exampleRef("internalDefinitions", "scala html")
      @p
        This is very useful for defining constants or functions which aren't needed anywhere else, but can help reduce repetition within the current document


@sect{Scalatex Site}
  @p
    The core of Scalatex is a very small, superficial translation from the @hl.scala{.scalatex} syntax to a @lnk("Scalatags", "https://github.com/lihaoyi/scalatags") fragment, letting you spit out HTML strings. Nevertheless, there are other concerns common to most (all?) documents, and Scalatags provides a number of common utilities that can quickly turn your structured document into a pretty, browse-able web page.

  @sect{Quick Start}
    @p
      If you want to get started quickly without fuss, given you've already added the SBT plugin to your @code{build.sbt} file, you should use @hl.scala{scalatex.ScalatexReadme} to get off the ground quickly:

    @hl.ref(wd/"build.sbt", "scalatex.ScalatexReadme", ".settings")

    @p
      This example usage would quickly create a project in the @code{readme/} folder, that you can immediately work with. Simple place a @code{Readme.scalatex} file in @code{readme/} and you can start writing Scalatex that will get turned into your documentation page. This default setup sets up all the commonly used functionality into the @hl.scala{Main} object, so make sure you start off with

    @hl.scala("""
      @import Main._
    """)
    @p
      to get access to functionality such as:

    @ul
      @li
        @sect.ref("Section", "sect"): a mechanism for defining sections in your document that will automatically get the correct-sized heading, and turn up in the table of contents
      @li
        @sect.ref("Highlighter", "hl"): a way to highlight strings in various languages or grab snippets from the filesystem to highlight

    @p
      When all is said and done, run:

    @hl.scala
      readme/run

    @p
      To generate the Scalatex site inside the @code{target/site} folder.


    @hr

    @p
      The changes are, this will create a reasonable looking document with an interactive navigation bar, nice looking headers, etc.. If you wish to really customize Scalatex, look at the following sections to see how these various components of a Scalatex site actually work.

  @sect{Section}
    @p
      One concern common to almost all documents is the idea of a section hierarchy: a tree of document sections where each section has a header and some contents, potentially containing more (smaller) sections. Scalatex provides the @hl.scala{scalatex.site.Section} helper that lets you do this easily:

    @pairs
      @half
        @hl.ref(wd/'readme/'section/"Example1.scalatex", "@sect")
      @half
        @exampleWrapper
          @section.Example1()

    @p
      As you can see, all the indented sections are automatically set to smaller headings. This is of course doable manually with @hl.scala{@@h1} @hl.scala{@@h2} @hl.scala{@@h3} tags etc., but then you have to manually keep track of how deep something is. With @hl.scala{Section}, this is kept track of for you.

    @p
      You can override the default rendering of @hl.scala{Section}s to e.g. use different headers:

    @pairs
      @half
        @hl.ref(wd/'readme/'section/"Example2.scalatex", Nil, "@sect")
      @half
        @exampleWrapper
          @section.Example2()

    @p
      Above, you see it using bold, underlines and strike-throughs to delimit the boundaries between headers. You can also override things in more detail using the @hl.scala{Section.Header} class instead of simple tags.

    @p
      You can use @hl.scala{@@sect.ref} to link to another part of the document:

    @pairs
      @half
        @hl.ref(wd/'readme/'section/"Example3.scalatex", "@sect")
      @half
        @exampleWrapper
          @section.Example3()

    @p
      Any links created with @hl.scala{@@sect.ref} are stored in an @hl.scala{@@sect.usedRefs} property as a list. We also expose a @hl.scala{@@sect.structure} property which allows you to inspect the tree of sections. If any of the sections referred to by @hl.scala{sect.ref} are not found, site-generation will fail with a helpful error telling you which one so you can fix it.

    @p
      Here we're just stringifying the @hl.scala{Tree} structure and placing it as text on the page, but you can easily recurse over the @hl.scala{Tree} structure and use it to e.g. build a table of contents, or a navigation bar.

  @sect{Highlighter}
    @p
      Scalatex Site provides a @hl.scala{Highlighter} class, which lets you easily highlight snippets of code pulled from files on disk. First, you need to instantiate a @hl.scala{Highlighter} object:

    @hl.ref(wd/'readme/'highlighter/"hl.scala")

    @p
      Once you have done so, you can highlight individual code snippets:
    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example5.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example5()

    @p
      Or you can use it to reference files in your code base in whole; e.g. here is Scalatex's plugins file:

    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example1.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example1()

    @p
      Note here we are using @lnk("Ammonite", "https://github.com/lihaoyi/Ammonite") to construct a path to pass to @hl.scala{@@hl.ref}; this path takes a working directory which you'll need to define yourself (here imported from @hl.scala{Main}) via @hl.scala{val wd = ammonite.ops.cwd}.

    @p
      Apart than referencing the whole file, you can also grab text from the line containing a key-string to the line containing another; here is parts of Scalatex's build file, from @hl.scala{lazy val api} to the next @hl.scala{lazy val}:

    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example2.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example2()

    @p
      Using multiple key-strings to navigate to a particular start- or end- line; here is the body of the unit test @hl.scala{scalatex.BasicTests.parenArgumentLists.attributes}, only from the @hl.scala{check} to the @hl.scala("}") closing that test.

    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example3.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example3()

    @p
      Note the spaces before the @hl.scala("}"), which ensures that it doesn't grab the earlier @hl.scala("}") in the string-literal which is part of the test body.
    @p
      Normally, the language used to highlight is inferred from the @hl.scala{suffixMappings} you defined when instantiating the @hl.scala{Highlighter}. You can override it manually by passing it in:

    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example6.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example6()
    @p
      As you can see, this is especially useful from grabbing examples from unit tests. You can encapsulate the boilerplate in a function, and easily grab both the code and the expected output from the unit tests highlighted in their own particular way to include in the document.

    @p
      Lastly, you can define a @hl.scala{pathMappings} property, which is a sequence of prefixes which the highlighter tries to match against the files you're referencing. If any of them match, a link is generated (in the top right corner of the code snippet) containing the mapped path prefix combined with the remainder of the file path. Here's one that links everything to github:

    @pairs
      @half
        @hl.ref(wd/'readme/'highlighter/"Example4.scalatex")
      @half
        @exampleWrapper
          @highlighter.Example4()


    @p
      You can customize the link to link to other places (bitbucket, local files, etc.) by changing the mapped URL. You can also pass in multiple @hl.scala{pathMappings} have links to files in different folders map to different base URLs, e.g. if you are referencing files in sub-repositories that have different public code

    @hr
    @p
      In general, @hl.scala{Highlighter.ref} is very helpful to quickly grab snippets of code from your unit tests, examples, or other places to include in your document. Using @hl.scala{Highlighter.ref}, you should never need to copy & paste code from unit tests to your documentation: simply refer to it directly, and you are guaranteed that your documentation will always be compile-able and in sync with what your code actually does in its unit tests.
  @sect{lnk}
    @p
      Scalatex provides the @hl.scala{lnk} function. This can be called with a single URL:

    @hl.scala
      @@lnk("http://www.google.com")

    @p
      Or with a custom name

    @hl.scala
      @@lnk("Google", "http://www.google.com")
    @p
      And generates a link to that URL. @hl.scala{@@lnk} also keeps track of all the links you create, and you can validate them later by running @hl.scala{sbt "readme/run --validate"} on your Scalatex readme project. This will reach out to every link you use and fail with an error if any of them are broken.

  @sect{Site}
    @p
      Finally, if all you want is to produce a working, pretty website without having to set up CSS and hosting and all that yourself, Scalatex provides a @hl.scala{Site} trait which lets you do this easily:

    @hl.ref(wd/'site/'src/'test/'scala/'scalatex/'site/"Tests.scala", Seq("'Site", "'simple", "val site"), "def check")

    @p
      This will result in a single HTML file @code{index.html} in the @code{site/target/output/} folder, as well as the JavaScript for @lnk("Highlight.js", "https://highlightjs.org/") and CSS for @lnk("Font Awesome", "http://fortawesome.github.io/Font-Awesome/") and @lnk("Less CSS", "http://purecss.io/") bundled together into @code{scripts.js} and @code{styles.css}. From there, you can simply copy the whole folder and serve it on whatever static file hosting (Github Pages, S3, etc.).

    @p
      Although @hl.scala{Site} provides reasonable defaults for all these things they are entirely customizable, and you just need to override various definitions when instantiating the @hl.scala{Site}. For example, here's a slightly more complex @hl.scala{Site} that generates multiple HTML pages (@code{page1.html} and @code{page2.html}) and generates them with custom names for the CSS and JavaScript bundles.

    @hl.ref(wd/'site/'src/'test/'scala/'scalatex/'site/"Tests.scala", Seq("'Site", "'overriding", "val site"), "val page1")

    @p
      Similarly, you can choose to supplement the default settings with your own customization. The following example
      specifies a different title for each of the two pages.

    @hl.ref(wd/'site/'src/'test/'scala/'scalatex/'site/"Tests.scala", Seq("'CustomHead", "'differentTitles", "val site"), "val page1")

    @p
      There are several other things you to can override, for a full list, look at the source code of @hl.scala{Site} to see what's available.

  @sect{GitHub pages}
    @p
      To publish a ScalateÏ‡ site to GitHub pages, it's possible to use
      @lnk("sbt-ghpages", "https://github.com/sbt/sbt-ghpages").

    @hl.scala
      // project/plugins.sbt
      addSbtPlugin("com.typesafe.sbt" % "sbt-ghpages" % "0.6.0")
      // build.sbt
      lazy val readme = scalatex
        .ScalatexReadme(/* ... */)
        .settings(
          // ...
          siteSourceDirectory := target.value / "scalatex",
          git.remoteRepo := "git@@github.com:org/repo.git"
        )
        .enablePlugins(GhpagesPlugin)
    Once setup, publish your site with @code{sbt readme/ghpagesPushSite}.

  @sect{Advanced Techniques}
    @p
      This section goes through a number of things which are not part of Scalatex by default, but are easily doable by extending Scalatex with snippets of Scala code. In general, all of these are probably sufficiently ad-hoc that the exact implementation would vary from project to project and so a built-in implementation wouldn't make sense.
    @sect{Custom Tags}
      @p
        Since tags are just functions, it is easy to define custom tags just by defining your own function that returns a Scalatags fragment. For example, auto-linking URL-looking-text isn't built in as part of Scalatex, but here's a custom tag that adds the capability:


      @pairs
        @half
          @hl.ref(wd/'readme/'advanced/"CustomTags1.scalatex")
        @half
          @exampleWrapper
            @advanced.CustomTags1()


      @p
        Again, if you are using the @hl.scala{@@def} in multiple files you can define it in Scala code and import it, but if you're only using it in one @code{.scalatex} file you can simply define it locally.

      @p
        Note how we check for the @code{://} inside the URL and default it to @code{http://} if it's missing; this is just plain-old-Scala, since the tag is just a Scala function.


    @sect{Generating a Table of Contents}
      @p
        Generating a TOC has also traditionally been a pain point for documents. There are two common scenarios:

      @ul
        @li
          The TOC is kept and maintained manually, separate from the document. This gives you full flexibility to customize it, at the cost of it easily falling out of date if the document changes.
        @li
          The TOC is auto-generated from the document with a tool that makes it difficult to customize. This often results in a TOC with is hard to customize, which you can only do using some clunky configuration language.
      @p
        With Scalatex, generating a TOC from the document is both easy and customizable. Here is a trivial example:

      @pairs
        @half
          @hl.ref(wd/'readme/'advanced/"TableOfContents.scalatex")
        @half
          @exampleWrapper
            @advanced.TableOfContents()

      @p
        As you can see, one short recursive function and is all that is necessary to transform the captured structure into a @hl.scala{ul} tree, with links to all the section headers! If you wish you can trivially modify this function to e.g. generate different HTML/CSS, only show top-level or top-and-second-level headers, or all manner of other things.

      @p
        Note the use of the @hl.scala{sect.munge} function. This is the function that converts the headings (with their spaces and other special characters) into a HTML element ID that can be used for the anchor link. By default, it simply removes spaces, but you can override it in the @hl.scala{Highlighter} object if you want some custom behavior.

@sect{Why Scalatex}
  @p
    Scalatex requires that you learn a new syntax for doing things, which is incompatible with @lnk("Markdown", "http://en.wikipedia.org/wiki/Markdown"),  @lnk("Textile", "http://en.wikipedia.org/wiki/Textile_(markup_language)"), and any other markup language you previously learned. Apart from that, Scalatex itself was the culmination of quite a lot of work to implement. Why did I do this?
  @p
    In general, Scalatex aims to make eliminating repetition and C&P sufficiently easy and elegant. Most template processors (with the exception of Twirl) start from text, and apply a series of transformations that turn the document into the HTML that you want. This ends up implementing a custom programming language with a custom syntax right inside your templates, often with

  @ul
    @li
      Unclear semantics and interactions
    @li
      A buggy parser
    @li
      No spec
    @li
      Lots of space for XSS vulnerabilities

  @p
    This is not great, but it always happens given a sufficiently complex document. For example, here's a sample of "real world" markdown taken from the Scala.js website, the render a relatively simple page:

  @pre
    @code
      ---
      layout: page
      title: Passing basic types to JavaScript
      ---
      {% include JB/setup %}

      ## Problem

      You need to pass simple types (String, Int, Boolean) to
      JavaScript functions.

      ## Solution

      Let us illustrate the case by writing some functions on the host-page.

      Edit `index-dev.html` and add the following function:

      {% highlight scala %}
      function happyNew(name, year) {
        alert("Hey " + name + ", happy new " + year + "!");
      }
      {% endhighlight %}

      As we saw in the recipe of [accessing the global scope][1],
      we need to make the following import:

      {% highlight scala %}
      import scala.scalajs.js
      import js.Dynamic.{ global => g }
      {% endhighlight %}

      Now on the Scala side you can call it like this:

      {% highlight scala %}
      def main(): Unit = {
        g.happyNew("Martin", 2014)
      }
      {% endhighlight %}

      Which will result in the values being used and the corresponding
      alert being shown.

      [1]: ./accessing-global-scope.html
  @p
    Note how we have:
  @ul
    @li
      @lnk("YAML", "http://en.wikipedia.org/wiki/YAML") mixed in at the top of the file, ad-hoc separated from the rest via @code{---}s.
    @li
      A mix of @lnk("Markdown", "http://commonmark.org") @code{##}s and @code{``}s and @lnk("Jekyll", "http://en.wikipedia.org/wiki/Jekyll_(software)") @code("{% %}")s to actually mark things up
    @li
      Custom imports at the top of the page @code("{% include JB/setup %}")
  @p
    This is a markdown document, but the same fate ends up befalling any complex document written in any existing document generation system: you end up with a chimera of 3 different languages spliced together using regexes. Scalatex fixes this not by making custom-logic unnecessary, but by making custom-logic so @sect.ref("Custom Tags", "easy and standardized") such that you never need to fall back to hacky regex manipulation.
  @p
    Furthermore, by leveraging the Scala compiler, Scalatex also provides many things that other markup languages do note:
  @ul
    @li
      @b{Precise error messages}: if you make a typo in a tag name, you get a compilation error telling you exactly where it went wrong
    @li
      @b{Type-safety}: this is what turns those typos into compile errors (instead of runtime mis-formats) in the first place
    @li
      @b{Incremental compilation}: Only recompile what you need to, so in a large (@lnk("100s of pages", "http://lihaoyi.github.io/hands-on-scala-js/")) document, you don't end up recompiling the world every change.

  @p
    These are things that virtually no markup generators provide, but Scalatex does. Here are a few more detailed comparisons between Scalatex and alternatives.

  @sect{Why Not: Markdown}
    @p
      @lnk("Markdown", "http://en.wikipedia.org/wiki/Markdown") is a lightweight format for writing rich text that has gained popularity recently. It has advantages of being extremely readable in plain-text: Markdown documents are formatted often exactly as someone would format emails or chat.
    @p
      Markdown has the advantages of being:

    @ul
      @li
        @b{Much more lightweight than Scalatex}: @code{`hello`} rather than @code{@@code{hello}}, @code{[link](url)} rather than @code{@@lnk("link", "url")}
      @li
        @b{Much more popularly supported}: @lnk("Github", "https://help.github.com/articles/github-flavored-markdown/"), @lnk("Stackoverflow", "http://stackoverflow.com/editing-help") and many others already use semi-compatible implementations of it

    @p
      However, it also has some downsides:
    @ul
      @li
        @b{Completely non-customizable by default}: in Markdown, you have @code{`code`} for specifying code. But what if you want to specify the language which you want your code to be highlighted? Impossible, without special extensions. Similarly, you have @code{[link](url)} for specifying links. But what if you want to treat external links differently from internal links? Again, impossible. With Scalatex, you can easily define different tags for each one: @hl.scala("@hl.scala{code}") to highlight Scala code, @hl.scala("@hl.javascript{code}") for JavaScript, @hl.scala("@hl.html{code}") to highlight HTML. Similarly, you can easily define @sect.ref{Custom Tags} that distinguish internal links from external links, giving them different CSS, markup of assertions.
      @li
        @b{Messy, ad-hoc extensions}: @lnk("Python Markdown", "http://pythonhosted.org/Markdown/extensions/") provides a list of extensions. @lnk("CommonMark.org", "http://commonmark.org") does too. How do these extensions interact with other extensions? How do you implement your own? The answer to the first question is "Who knows?" and to the second "Regexes". Naturally, this makes people hesitant to implement extensions: they'd rather C&P markup than deal with crazy regex transforms. Is highlight code done using @code{```scala} or @code("{% highlight scala %}")? With Scalatex, defining @sect.ref{Custom Tags} is so easy that it's the natural thing to do, so you never need to worry about weird interactions between weird custom syntaxes.
      @li
        @b{Unclear semantics}. For example, for rendering a link with parentheses in the URL, there are a @lnk("dozen different work-arounds", "http://meta.stackexchange.com/questions/13501/links-to-urls-containing-parentheses") that make it work in increasingly roundabout ways, all stemming from the fact that Markdown doesn't have a good, standard way of expressing escape-characters. With Scalatex, the semantics are much more regular: you can put anything in a @hl.scala{@@("string")} to escape it, and always fall back to Scala-strings with Scala-string-escapes. And their semantics behave exactly as you'd expect.
      @li
        @b{Unsafe}: What happens if you fat-finger some special characters in Markdown? You get another, perfectly valid markdown document, that you did not want. If you fat-finger a tag in Scalatex, you get a compilation error telling you where you made a mistake.
    @p
      In general, Markdown is far more concise than Scalatex, and probably better for writing small documents like comments or chat boxes. For anything larger, you probably do want to define larger, re-usable components to deal with, rather than working directly with the fixed set of primitives markdown provides. Instead of working with fenced-code-snippets, links, and headers, you're working with references to your unit test code, or document sections that automatically provide the correct sized headers.

    @p
      This makes large-scale documents much more pleasant, to the extent that you can perform large-scale refactorings of your Scalatex document without worrying about broken intra-document links or a stale table-of-contents.

  @sect{Why Not: Twirl}
    @p
      @lnk("Twirl", "https://github.com/playframework/twirl#twirl") is the templating engine used by the @lnk("Play framework", "https://www.playframework.com/documentation/2.3.x/ScalaTemplates"). It provides a Scala-based syntax (and implementation!) very similar to Scalatex.
    @p
      In general, Scalatex is heavily inspired by Twirl: the original implementation started off as a fork of the Twirl source code, and though it has now diverged, the similarities are obvious. Scalatex has attempted to clean up a lot of unnecessary or ad-hoc cruft in the Twirl language, in an attempt to make something cleaner and nicer to use. For example:

    @ul
      @li
        @b{Scalatex has dropped Twirl's XML syntax}: using tags like @hl.scala{<div>} are redundant when you can use tags like @hl.scala("@div"), and so the latter is now the only way to do things.
      @li
        @b{Scalatex has regularized the Twirl grammar substantially}: Twirl only allows function definitions to occur in templates at the top-level, which Scalatex allows @hl.scala{object}s, @hl.scala{class}es, @hl.scala{def}s, @hl.scala{val}s anywhere with your document with proper lexical scoping. This makes working with large documents much easier, as you aren't restricted by the ad-hoc "only-top-level" constraint when trying to remove duplication within your document.
      @li
        @b{Scalatex has made indentation significant}, thus greatly reducing the need for curly brackets in large documents.
      @li
        @b{Scalatex has a greatly simplified implementation} that gives you incremental compilation, proper error messages, etc. all for free without the @lnk("crazy contortions", "https://github.com/playframework/twirl/blob/master/sbt-twirl/src/main/scala/play/twirl/sbt/TemplateProblem.scala") that the Play team have gone through to get them working with their source-generation model.
    @p
      Scalatex is still missing a few features:
    @ul
      @li
        Being able to parametrize an entire template as a function
      @li
        Being able to define @hl.scala{def}s using Scalatex syntax; Scalatex @hl.scala{def}s have to be defined using Scala syntax
    @p
      In general, Scalatex aims to be much more regular and lighter weight than Twirl. You probably wouldn't want to use Twirl to write a book due to its excess of curlies and XML, whereas with Scalatex you can (and @lnk("I have", "http://lihaoyi.github.io/hands-on-scala-js/#Hands-onScala.js")). At the same time, Scalatex keeps the best part of Twirl - the abilities to eliminate repetition using plain Scala - and extends to to work more regularly.
    @p
      The limitations are not fundamental, but purely a matter of how Scalatex is being used now: static documents, rather than dynamic pages. If there's interest removing them would not be hard.

@sect{Changelog}
  @sect{0.3.11}
    @ul
      @li
        sbt 1.0 support for scalatex-sbt-plugin.
  @sect{0.3.9}
    @ul
      @li
        Upgrade fastparse dependency to 0.4.3.
      @li
        Note. This release was signed with @lnk("@olafurpg", "https://github.com/olafurpg")'s
        @lnk("PGP key", "https://gist.github.com/olafurpg/078d1f2a58490ccaeebd7d3f6cde00fc").

  @sect{0.3.7}
    @ul
      @li
        Update to Scala 2.12.x

  @sect{0.3.6}
    @ul
      @li
        Bump Scalatags version to 0.6.0

  @sect{0.3.5}
    @ul
      @li
        Scalatex sites now support favicons! Place @code{favicon.png} in the @code{resources/} folder of your Scalatex subproject and it should get picked up automatically.
      @li
        Scalatex sites now set the HTML page-title using the first header on the page.

  @sect{0.3.4}
    @ul
      @li
        Upgrade ScalaParse to 0.3.1
  @sect{0.3.3}
    @ul
      @li
        Fix botched release
  @sect{0.3.2}
    @ul
      @li
        Better error reporting for syntax errors; line-contents, caret and line/col number rather than just character-offset
      @li
        Trailing whitespace on a line no longer botches error messages after it
      @li
        Added the @sect.ref{lnk} function to link to external URLs, and the @code{--validate} flag passed to @code{run} that makes sure none of them are broken
